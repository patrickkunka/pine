{"version":3,"sources":["../src/Patterns.js"],"names":["BOOLEAN","PUNCTUATOR","IDENTIFIER","NUMBER","STRING","KEYWORD","join","WHITESPACE","MEMBER_EXPRESSION","UNARY_EXPRESSION","PARAMETERS_EXPRESSION","ASSIGNMENT_EXPRESSION","BINARY_EXPRESSION","LOGICAL_EXPRESSION","CALL_EXPRESSION","RETURN_STATEMENT","BLOCK_STATEMENT","FUNCTION_DECLARATION","VARIABLE_DECLARATION","IF_STATEMENT"],"mappings":";;;;;;;AAEA;;AAEO,MAAMA,4BAAyB,+BAA/B,C,CAJP;;AAKO,MAAMC,kCAAyB,uEAA/B;AACA,MAAMC,kCAAyB,6BAA/B;AACA,MAAMC,0BAAyB,mBAA/B;AACA,MAAMC,0BAAyB,sDAA/B;AACA,MAAMC,4BAAyB,OAAO,mBAASC,IAAT,CAAc,GAAd,CAAP,GAA4B,kBAA3D;AACA,MAAMC,kCAAyB,SAA/B;;AAEA,MAAMC,gDAAyB,oEAA/B;AACA,MAAMC,8CAAyB,+DAA/B;AACA,MAAMC,wDAAyB,kGAA/B;AACA,MAAMC,wDAAyB,iEAA/B;AACA,MAAMC,gDAAyB,oLAA/B;AACA,MAAMC,kDAAyB,mPAA/B;AACA,MAAMC,4CAAyB,oEAA/B;AACA,MAAMC,8CAAyB,yHAA/B;;AAEA,MAAMC,4CAAyB,UAA/B;AACA,MAAMC,sDAAyB,+FAA/B;AACA,MAAMC,sDAAyB,4BAA/B;AACA,MAAMC,sCAAyB,uIAA/B","file":"Patterns.js","sourcesContent":["/* eslint-disable max-len */\n\nimport {KEYWORDS} from './Entities';\n\nexport const BOOLEAN                = '^(true|false)(?=([\\\\s;),]|$))';\nexport const PUNCTUATOR             = '^(&&|\\\\|\\\\||<=|>=|===|!==|==|!=|--|\\\\+\\\\+|[-\\\\.,:;!+=\\\\<>{}()\\\\[\\\\]])';\nexport const IDENTIFIER             = '^([A-Za-z$_][A-Za-z$_0-9]*)';\nexport const NUMBER                 = '^([0-9.]+)(?!\\\\w)';\nexport const STRING                 = '^(\"([^\"\\\\n\\\\\\\\]|\\\\\\\\\")*\"|\\'([^\\'\\\\n\\\\\\\\]|\\\\\\\\\\')*\\')';\nexport const KEYWORD                = '^(' + KEYWORDS.join('|') + ')(?=([\\\\s;.]|$))';\nexport const WHITESPACE             = '^(\\\\s+)';\n\nexport const MEMBER_EXPRESSION      = '(this|identifier|literal)( \\\\. identifier| \\\\. member_expression)+';\nexport const UNARY_EXPRESSION       = '(!|-) (member_expression|identifier|unary_expression|literal)';\nexport const PARAMETERS_EXPRESSION  = '\\\\(( identifier| literal| member_expression)( , identifier| , literal| , member_expression)* \\\\)';\nexport const ASSIGNMENT_EXPRESSION  = '(member_expression |identifier )= (literal |identifier |this );';\nexport const BINARY_EXPRESSION      = '(\\\\( (?=[\\\\w\\\\s]+\\\\)))?(member_expression |identifier |literal |unary_expression |this |null)comparison_operator (member_expression|identifier|literal|unary_expression|this|null)';\nexport const LOGICAL_EXPRESSION     = '(\\\\( (?=[\\\\w\\\\s]+\\\\)))?(member_expression |identifier |literal |binary_expression |logical_expression |unary_expression |this )logical_operator (member_expression|identifier|literal|binary_expression|logical_expression|unary_expression|this)';\nexport const CALL_EXPRESSION        = '(member_expression |identifier )(parameters_expression |\\\\( \\\\) );';\nexport const RETURN_STATEMENT       = 'return (member_expression |identifier |literal |logical_expression |unary_expression |binary_expression |this |null |);';\n\nexport const BLOCK_STATEMENT        = '{[^{}]+}';\nexport const FUNCTION_DECLARATION   = '(function|get|set)( get| set|)( identifier|)( \\\\( \\\\)| parameters_expression) block_statement';\nexport const VARIABLE_DECLARATION   = '(var|const|let) assignment';\nexport const IF_STATEMENT           = 'if( binary_expression| logical_expression| parameters_expression) block_statement( else block_statement| else if_statement|(?! else))';"]}