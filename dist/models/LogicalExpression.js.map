{"version":3,"sources":["../../src/models/LogicalExpression.js"],"names":["LogicalExpression","constructor","left","right","operator","Object","seal","toString","isDoubleBinary","isNullOrEmptyCheck","content","isIsNullOrEmpty","isIsNotNullOrEmpty","nullOrEmptyArgument"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAMA,iBAAN,yBAAsC;AAClCC,kBAAc;AACV;;AAEA,aAAKC,IAAL,GAAkB,IAAlB;AACA,aAAKC,KAAL,GAAkB,IAAlB;AACA,aAAKC,QAAL,GAAkB,IAAlB;;AAEAC,eAAOC,IAAP,CAAY,IAAZ;AACH;;AAEDC,eAAW;AACP,eAAO,oBAAP;AACH;;AAED,QAAIC,cAAJ,GAAqB;AACjB,eAAO,KAAKN,IAAL,0CAAyC,KAAKC,KAAL,sCAAhD;AACH;;AAED,QAAIM,kBAAJ,GAAyB;AACrB,eACI,KAAKD,cAAL,IACA,KAAKN,IAAL,CAAUA,IAAV,CAAeQ,OAAf,KAA2B,KAAKP,KAAL,CAAWD,IAAX,CAAgBQ,OAD3C,IAEA,KAAKR,IAAL,CAAUE,QAAV,CAAmBM,OAAnB,KAA+B,KAAKP,KAAL,CAAWC,QAAX,CAAoBM,OAFnD,KAIK,KAAKR,IAAL,CAAUC,KAAV,CAAgBO,OAAhB,KAA4B,MAA5B,IAAsC,KAAKP,KAAL,CAAWA,KAAX,CAAiBO,OAAjB,KAA6B,EAApE,IACC,KAAKR,IAAL,CAAUC,KAAV,CAAgBO,OAAhB,KAA4B,EAA5B,IAAkC,KAAKP,KAAL,CAAWA,KAAX,CAAiBO,OAAjB,KAA6B,MALpE,CADJ;AASH;;AAED,QAAIC,eAAJ,GAAsB;AAClB,eAAO,KAAKF,kBAAL,IAA2B,KAAKP,IAAL,CAAUE,QAAV,CAAmBM,OAAnB,KAA+B,KAA1D,IAAmE,KAAKN,QAAL,CAAcM,OAAd,KAA0B,IAApG;AACH;;AAED,QAAIE,kBAAJ,GAAyB;AACrB,eAAO,KAAKH,kBAAL,IAA2B,KAAKP,IAAL,CAAUE,QAAV,CAAmBM,OAAnB,KAA+B,KAA1D,IAAmE,KAAKN,QAAL,CAAcM,OAAd,KAA0B,IAApG;AACH;;AAED,QAAIG,mBAAJ,GAA0B;AACtB,eAAO,KAAKJ,kBAAL,GAA0B,KAAKP,IAAL,CAAUA,IAApC,GAA2C,IAAlD;AACH;AAzCiC;;kBA4CvBF,iB","file":"LogicalExpression.js","sourcesContent":["import Token from './Token';\nimport BinaryExpression from './BinaryExpression';\n\nclass LogicalExpression extends Token {\n    constructor() {\n        super();\n\n        this.left       = null;\n        this.right      = null;\n        this.operator   = null;\n\n        Object.seal(this);\n    }\n\n    toString() {\n        return 'logical_expression';\n    }\n\n    get isDoubleBinary() {\n        return this.left instanceof BinaryExpression && this.right instanceof BinaryExpression;\n    }\n\n    get isNullOrEmptyCheck() {\n        return (\n            this.isDoubleBinary &&\n            this.left.left.content === this.right.left.content &&\n            this.left.operator.content === this.right.operator.content &&\n            (\n                (this.left.right.content === 'null' && this.right.right.content === '') ||\n                (this.left.right.content === '' && this.right.right.content === 'null')\n            )\n        );\n    }\n\n    get isIsNullOrEmpty() {\n        return this.isNullOrEmptyCheck && this.left.operator.content === '===' && this.operator.content === '||';\n    }\n\n    get isIsNotNullOrEmpty() {\n        return this.isNullOrEmptyCheck && this.left.operator.content === '!==' && this.operator.content === '&&';\n    }\n\n    get nullOrEmptyArgument() {\n        return this.isNullOrEmptyCheck ? this.left.left : null;\n    }\n}\n\nexport default LogicalExpression;"]}