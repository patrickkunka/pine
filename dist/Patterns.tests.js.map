{"version":3,"sources":["../src/Patterns.tests.js"],"names":["patterns","describe","it","code","re","RegExp","STRING","match","exec","isOk","equal","isNotOk","BOOLEAN","PUNCTUATOR","notEqual","IDENTIFIER","KEYWORD","NUMBER","WHITESPACE"],"mappings":"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","file":"Patterns.tests.js","sourcesContent":["import * as patterns from './Patterns';\nimport {assert} from 'chai';\n\ndescribe('Patterns', () => {\n    // /^(\"([^\"\\n\\\\]|\\\\\")*\"|'([^'\\n\\\\]|\\\\')*')/\n\n    describe('#STRING', () => {\n        it('should recognise a string literal wrapped in double quotes', () => {\n            const code = '\"foo\"';\n            const re = new RegExp(patterns.STRING);\n            const match = re.exec(code);\n\n            assert.isOk(re);\n            assert.equal(match[1], '\"foo\"');\n        });\n\n        it('should recognise a string literal wrapped in single quotes', () => {\n            const code = \"'foo'\"; // eslint-disable-line quotes\n            const re = new RegExp(patterns.STRING);\n            const match = re.exec(code);\n\n            assert.isOk(re);\n            assert.equal(match[1], \"'foo'\"); // eslint-disable-line quotes\n        });\n\n        it('should recognise an empty string literal', () => {\n            const code = '\"\"';\n            const re = new RegExp(patterns.STRING);\n            const match = re.exec(code);\n\n            assert.isOk(re);\n            assert.equal(match[1], '\"\"');\n        });\n\n        it('should recognise a string literal containing varied characters', () => {\n            const code = '\"Lorem ipsum sit dolor 12345. Hello world!\"';\n            const re = new RegExp(patterns.STRING);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a string literal containing escaped quotes', () => {\n            const code = '\"Lorem ipsum \\\\\"sit\\\\\" dolor\"';\n            const re = new RegExp(patterns.STRING);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should not recognise a string literal starting with an escaped quote', () => {\n            const code = '\\\\\"Lorem ipsum\\\\\"';\n            const re = new RegExp(patterns.STRING);\n            const match = re.exec(code);\n\n            assert.isNotOk(match);\n        });\n\n        it('should only match the first string of multiple', () => {\n            const code = '\"Lorem ipsum\" === \"Sit dolor\"';\n            const re = new RegExp(patterns.STRING);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], '\"Lorem ipsum\"');\n        });\n    });\n\n    // /^(true|false)(?=([\\s;),]|$))/\n\n    describe('#BOOLEAN', () => {\n        it('should recognise a `true` boolean', () => {\n            const code = 'true';\n            const re = new RegExp(patterns.BOOLEAN);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], 'true');\n        });\n\n        it('should recognise a `false` boolean', () => {\n            const code = 'false';\n            const re = new RegExp(patterns.BOOLEAN);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], 'false');\n        });\n\n        it('should recognise a boolean followed by a \";\"', () => {\n            const code = 'false;';\n            const re = new RegExp(patterns.BOOLEAN);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], 'false');\n        });\n\n        it('should recognise a boolean followed by a \")\"', () => {\n            const code = 'false)';\n            const re = new RegExp(patterns.BOOLEAN);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], 'false');\n        });\n\n        it('should recognise a boolean followed by a \",\"', () => {\n            const code = 'false,';\n            const re = new RegExp(patterns.BOOLEAN);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], 'false');\n        });\n\n        it('should not recognise a sequence of characters starting with the word `true`', () => {\n            const code = 'truent';\n            const re = new RegExp(patterns.BOOLEAN);\n            const match = re.exec(code);\n\n            assert.isNotOk(match);\n        });\n\n        it('should not recognise a sequence of characters ending with the word `true`', () => {\n            const code = 'isUntrue';\n            const re = new RegExp(patterns.BOOLEAN);\n            const match = re.exec(code);\n\n            assert.isNotOk(match);\n        });\n\n        it('should not recognise a sequence of characters starting with the word `false`', () => {\n            const code = 'falsetto';\n            const re = new RegExp(patterns.BOOLEAN);\n            const match = re.exec(code);\n\n            assert.isNotOk(match);\n        });\n\n        it('should not recognise a sequence of characters ending with the word `false`', () => {\n            const code = 'isUnfalse';\n            const re = new RegExp(patterns.BOOLEAN);\n            const match = re.exec(code);\n\n            assert.isNotOk(match);\n        });\n    });\n\n    // /^(&&|\\|\\||<=|>=|===|!==|==|!=|--|\\+\\+|[-\\.,:;!+=\\<>{}()\\[\\]])/\n\n    describe('#PUNCTUATOR', () => {\n        it('should recognise a `-` punctuator', () => {\n            const code = '-';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `.` punctuator', () => {\n            const code = '.';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `,` punctuator', () => {\n            const code = ',';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `:` punctuator', () => {\n            const code = ':';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `;` punctuator', () => {\n            const code = ';';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `!` punctuator', () => {\n            const code = '!';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `+` punctuator', () => {\n            const code = '+';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `=` punctuator', () => {\n            const code = '=';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should not recognise a bitwise `|` punctuator', () => {\n            const code = '|';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isNotOk(match);\n        });\n\n        it('should not recognise a bitwise `&` punctuator', () => {\n            const code = '&';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isNotOk(match);\n        });\n\n        it('should recognise a `<` punctuator', () => {\n            const code = '<';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `>` punctuator', () => {\n            const code = '>';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `{` punctuator', () => {\n            const code = '{';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `}` punctuator', () => {\n            const code = '}';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `[` punctuator', () => {\n            const code = '[';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `]` punctuator', () => {\n            const code = ']';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `(` punctuator', () => {\n            const code = '(';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `)` punctuator', () => {\n            const code = ')';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `&&` punctuator', () => {\n            const code = '&&';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `||` punctuator', () => {\n            const code = '||';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `==` punctuator', () => {\n            const code = '==';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `!=` punctuator', () => {\n            const code = '!=';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `!==` punctuator', () => {\n            const code = '!==';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `++` punctuator', () => {\n            const code = '++';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `--` punctuator', () => {\n            const code = '--';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `<=` punctuator', () => {\n            const code = '<=';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a `>=` punctuator', () => {\n            const code = '>=';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should should only match the first valid character(s) of arbitrary collections of punctuators', () => {\n            const code = '(\"';\n            const re = new RegExp(patterns.PUNCTUATOR);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.notEqual(match[1], code);\n            assert.equal(match[1], '(');\n        });\n    });\n\n    // /^([A-Za-z$_][A-Za-z$_0-9]*)/\n\n    describe('#IDENTIFIER', () => {\n        it('should recognise a variable identifier', () => {\n            const code = 'foo';\n            const re = new RegExp(patterns.IDENTIFIER);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a camel cased variable identifier', () => {\n            const code = 'isFoo';\n            const re = new RegExp(patterns.IDENTIFIER);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a pascal cased variable identifier', () => {\n            const code = 'FooModel';\n            const re = new RegExp(patterns.IDENTIFIER);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a variable identifier containing a number', () => {\n            const code = 'FooModel0';\n            const re = new RegExp(patterns.IDENTIFIER);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should not recognise a variable identifier starting with a number', () => {\n            const code = '0FooModel';\n            const re = new RegExp(patterns.IDENTIFIER);\n            const match = re.exec(code);\n\n            assert.isNotOk(match);\n        });\n\n        it('should recognise a variable identifier starting with a \"$\"', () => {\n            const code = '$container';\n            const re = new RegExp(patterns.IDENTIFIER);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a variable identifier starting with a \"_\"', () => {\n            const code = '_private';\n            const re = new RegExp(patterns.IDENTIFIER);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n    });\n\n    // /^(this|var|let.. )(?=([\\s;.]|$))/\n\n    describe('#KEYWORDS', () => {\n        it('should recognise a keyword', () => {\n            const code = 'this';\n            const re = new RegExp(patterns.KEYWORD);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a keyword followed by a \".\"', () => {\n            const code = 'this.foo';\n            const re = new RegExp(patterns.KEYWORD);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], 'this');\n        });\n\n        it('should recognise a keyword followed by a \";\"', () => {\n            const code = 'this;';\n            const re = new RegExp(patterns.KEYWORD);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], 'this');\n        });\n\n        it('should recognise a keyword followed by whitespace', () => {\n            const code = 'this ';\n            const re = new RegExp(patterns.KEYWORD);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], 'this');\n        });\n\n        it('should not recognise a sequence of characters ending in a keyword', () => {\n            const code = 'thistle';\n            const re = new RegExp(patterns.KEYWORD);\n            const match = re.exec(code);\n\n            assert.isNotOk(match);\n        });\n\n        it('should not recognise a sequence of characters starting in a keyword', () => {\n            const code = 'fuckthis';\n            const re = new RegExp(patterns.KEYWORD);\n            const match = re.exec(code);\n\n            assert.isNotOk(match);\n        });\n    });\n\n    // /^([0-9.]+)(?!\\w)/\n\n    describe('#NUMBER', () => {\n        it('should regonise an integer', () => {\n            const code = '3';\n            const re = new RegExp(patterns.NUMBER);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should regonise a decimal', () => {\n            const code = '3.14';\n            const re = new RegExp(patterns.NUMBER);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should not regonise a number followed by non-numeric characters', () => {\n            const code = '3rdAttempt';\n            const re = new RegExp(patterns.NUMBER);\n            const match = re.exec(code);\n\n            assert.isNotOk(match);\n        });\n    });\n\n    // /^(\\s+)/\n\n    describe('#WHITESPACE', () => {\n        it('should recognise a single space character', () => {\n            const code = ' ';\n            const re = new RegExp(patterns.WHITESPACE);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise multiple single space characters', () => {\n            const code = '   ';\n            const re = new RegExp(patterns.WHITESPACE);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise a single tab character', () => {\n            const code = '\t';\n            const re = new RegExp(patterns.WHITESPACE);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n\n        it('should recognise whitespace over multiple lines', () => {\n            const code = (\n                `\n\n                `\n            );\n\n            const re = new RegExp(patterns.WHITESPACE);\n            const match = re.exec(code);\n\n            assert.isOk(match);\n            assert.equal(match[1], code);\n        });\n    });\n});"]}