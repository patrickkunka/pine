{"version":3,"sources":["../src/Patterns.js"],"names":["Patterns","BOOLEAN","PUNCTUATOR","IDENTIFIER","NUMBER","STRING","KEYWORD","KEYWORDS","join","WHITESPACE","MEMBER_EXPRESSION","UNARY_EXPRESSION","PARAMETERS_EXPRESSION","ASSIGNMENT_EXPRESSION","BINARY_EXPRESSION","LOGICAL_EXPRESSION","CALL_EXPRESSION","RETURN_STATEMENT","BLOCK_STATEMENT","FUNCTION_DECLARATION","VARIABLE_DECLARATION","IF_STATEMENT"],"mappings":";;;;;;AAEA;;;;;;AAEA,MAAMA,QAAN,CAAe,E,CAJf;;AAMAA,SAASC,OAAT,GAAkC,+BAAlC;AACAD,SAASE,UAAT,GAAkC,uEAAlC;AACAF,SAASG,UAAT,GAAkC,6BAAlC;AACAH,SAASI,MAAT,GAAkC,mBAAlC;AACAJ,SAASK,MAAT,GAAkC,sDAAlC;AACAL,SAASM,OAAT,GAAkC,OAAO,mBAASC,QAAT,CAAkBC,IAAlB,CAAuB,GAAvB,CAAP,GAAqC,kBAAvE;AACAR,SAASS,UAAT,GAAkC,SAAlC;;AAEAT,SAASU,iBAAT,GAAkC,oEAAlC;AACAV,SAASW,gBAAT,GAAkC,+DAAlC;AACAX,SAASY,qBAAT,GAAkC,kGAAlC;AACAZ,SAASa,qBAAT,GAAkC,iEAAlC;AACAb,SAASc,iBAAT,GAAkC,oLAAlC;AACAd,SAASe,kBAAT,GAAkC,mPAAlC;AACAf,SAASgB,eAAT,GAAkC,oEAAlC;AACAhB,SAASiB,gBAAT,GAAkC,yHAAlC;;AAEAjB,SAASkB,eAAT,GAAkC,UAAlC;AACAlB,SAASmB,oBAAT,GAAkC,+FAAlC;AACAnB,SAASoB,oBAAT,GAAkC,4BAAlC;AACApB,SAASqB,YAAT,GAAkC,uIAAlC;;kBAGerB,Q","file":"Patterns.js","sourcesContent":["/* eslint-disable max-len */\n\nimport Entities from './Entities';\n\nclass Patterns {}\n\nPatterns.BOOLEAN                = '^(true|false)(?=([\\\\s;),]|$))';\nPatterns.PUNCTUATOR             = '^(&&|\\\\|\\\\||<=|>=|===|!==|==|!=|--|\\\\+\\\\+|[-\\\\.,:;!+=\\\\<>{}()\\\\[\\\\]])';\nPatterns.IDENTIFIER             = '^([A-Za-z$_][A-Za-z$_0-9]*)';\nPatterns.NUMBER                 = '^([0-9.]+)(?!\\\\w)';\nPatterns.STRING                 = '^(\"([^\"\\\\n\\\\\\\\]|\\\\\\\\\")*\"|\\'([^\\'\\\\n\\\\\\\\]|\\\\\\\\\\')*\\')';\nPatterns.KEYWORD                = '^(' + Entities.KEYWORDS.join('|') + ')(?=([\\\\s;.]|$))';\nPatterns.WHITESPACE             = '^(\\\\s+)';\n\nPatterns.MEMBER_EXPRESSION      = '(this|identifier|literal)( \\\\. identifier| \\\\. member_expression)+';\nPatterns.UNARY_EXPRESSION       = '(!|-) (member_expression|identifier|unary_expression|literal)';\nPatterns.PARAMETERS_EXPRESSION  = '\\\\(( identifier| literal| member_expression)( , identifier| , literal| , member_expression)* \\\\)';\nPatterns.ASSIGNMENT_EXPRESSION  = '(member_expression |identifier )= (literal |identifier |this );';\nPatterns.BINARY_EXPRESSION      = '(\\\\( (?=[\\\\w\\\\s]+\\\\)))?(member_expression |identifier |literal |unary_expression |this |null)comparison_operator (member_expression|identifier|literal|unary_expression|this|null)';\nPatterns.LOGICAL_EXPRESSION     = '(\\\\( (?=[\\\\w\\\\s]+\\\\)))?(member_expression |identifier |literal |binary_expression |logical_expression |unary_expression |this )logical_operator (member_expression|identifier|literal|binary_expression|logical_expression|unary_expression|this)';\nPatterns.CALL_EXPRESSION        = '(member_expression |identifier )(parameters_expression |\\\\( \\\\) );';\nPatterns.RETURN_STATEMENT       = 'return (member_expression |identifier |literal |logical_expression |unary_expression |binary_expression |this |null |);';\n\nPatterns.BLOCK_STATEMENT        = '{[^{}]+}';\nPatterns.FUNCTION_DECLARATION   = '(function|get|set)( get| set|)( identifier|)( \\\\( \\\\)| parameters_expression) block_statement';\nPatterns.VARIABLE_DECLARATION   = '(var|const|let) assignment';\nPatterns.IF_STATEMENT           = 'if( binary_expression| logical_expression| parameters_expression) block_statement( else block_statement| else if_statement|(?! else))';\n\n\nexport default Patterns;"]}